var mongoose = require('mongoose'),
  tokenNFT = mongoose.model('tokenNFT'),
  tokenTrade = mongoose.model('tokenTrade'),
  async = require('async'),
    moment = require('moment'),
    fs = require("fs"),
    path = require("path"),
    Web3 = require("web3"),
    ethTx = require('ethereumjs-tx');
const ipfsClient = require('ipfs-http-client')
const{v4 : uuidv4} = require('uuid');



const ipfs = new ipfsClient({
  host: '127.0.0.1',
  port: '5001',
  protocol: 'http'
});

const ABI_ERC20 = JSON.parse(fs.readFileSync(path.join(__dirname, '../token/ERC20/build/contracts/BPTToken.json'), 'utf-8'));
const ABI_NFT = JSON.parse(fs.readFileSync(path.join(__dirname, '../token/NFT/build/contracts/BatteryNFT.json'), 'utf-8'));

const abi_ERC20 = ABI_ERC20.abi;
const abi_NFT = ABI_NFT.abi;

const bytecode_ERC20 = ABI_ERC20.bytecode;
const bytecode_NFT = ABI_NFT.bytecode;

var provider = 'https://besu.chainz.network';

const token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJwZXJtaXNzaW9ucyI6WyJuZXQ6KiIsImV0aDoqIiwiZGVidWc6KiIsInR4cG9vbDoqIiwiZWVhOioiXSwiZXhwIjoxNjA3MTQ4MjM0LCJ0ZWFtIjoiMDkifQ.xvVsyGQBD_BKNSleATF6i7vvGOzBMQdloSBLuA66-2OfO1bi-KUrisAWJ2QOK0RicfAb_heIE_FdSqusfqLR6oIqaTbfq6KDprMcJO5rMGKPcYA2btHteYZ9dVd8Cesnz1ZUvOfLr9_KoVYzAcHwIqik_Jaya9wgAw4dVnr5-gA_jiCwoy8EUAeL67OUC48cCukYj7zAdMmYZ2eaMLh5v_DxNJggUuFazLRKBPPTqHFmqG_ppq5ziJg4EmtLCeEDoO9aehrySLN_bQu2Dhu3MYMdrXUpFTrjXRx6KDI8GFoD5SnloGKGdzAY3HosvwpVf9KzLkothYEUHdI5wRCyow";

var options = {
  headers: [{
    name: "Authorization",
    value: "Bearer " + token
  }]
};

var web3 = new Web3(new Web3.providers.HttpProvider(provider, options))

// main net
const contractAddress_NFT = '0x80ec4DD4aF52fA70c2073a72888888d78551F30c';
const contractAddress_ERC = '0x411566d8419C4a69140cb5AF47bf2Da074C19155';


const contract_ERC = new web3.eth.Contract(abi_ERC20, contractAddress_ERC);
const contract_NFT = new web3.eth.Contract(abi_NFT, contractAddress_NFT);

const addressAlice = '0x2462c740ef43aa7e251aff3470f5969af2bd8106';
const privKeyAlice = '0x925efbc2aaf2e2292258688c29e155f65b9b63a8f46b195de0ad90c2b57f0d49';

const addressBob = '0x6c9ce229253612b91b148f8173ce835202ae334a';
const privKeyBob = '0x1d69431b3c2380c7cb8fad628415ae167d94ce3617c127510ab6944aaaab5908';


const accountBob = web3.eth.accounts.privateKeyToAccount(privKeyBob);
const WalletBob = web3.eth.accounts.wallet.add(accountBob);
const accountAlice = web3.eth.accounts.privateKeyToAccount(privKeyAlice);
const WalletAlcie = web3.eth.accounts.wallet.add(accountAlice);

const addressFrom = addressBob;
const addressTo = addressAlice;


var getErrorMessage = function (err) {
  if (err.errors) {
    for (var errName in err.errors) {
      if (err.errors[errName].message) {
        return err.errors[errName].message;
      }
    }
  } else {
    console.log(err);
    return 'Unknown server error';
  }
};

exports.Slist = async function (req, res, next) {
  var perPage = 9
  var page = req.params.page || 1
  var arrTokenInfo = new Array();
  var arrTokenId = new Array();
  var arrTrsInfo = new Array();
  var balance_alice = await contract_ERC.methods.balanceOf(addressAlice).call();
  var tokenId = await contract_NFT.methods.tokenByOwner(addressAlice).call();
  var arrFlag = new Array();
  for (id of tokenId) {

    var tokenInfo = new Object();
   await  tokenNFT.findOne({tokenId : id}, function(err, InfoFromDB)
    {
	if(err)
	return console.log(err);
     arrFlag.push(InfoFromDB.publishedFlag);
     });
    arrTokenId.push(id);
    tokenInfo = await contract_NFT.methods.informationByToken(id).call();
    arrTokenInfo.push(tokenInfo);
  }
  await  tokenTrade.find({seller : addressAlice}, function(err, trs)
   {
;
	if(err)
	console.log(err);
        for(var i = 0 ; i <trs.length;i++)	
        {
	   var trsInfo = new Object();
           trsInfo = trs[i];

   
        arrTrsInfo.push(trsInfo);

        }

	}).sort({date : -1});


  res.render('seller/index', {

    tokenInfo: arrTokenInfo,
    tradeFlag: arrFlag,
    balance: balance_alice,
    tokenId: arrTokenId,
    trsInfo : arrTrsInfo,
    messages: null,
    moment
  });
}

exports.upload_file = async function (req, res) {
  console.log(req.file);
  var now = new Date();
 var now = new Date();
  var curTime = (now.getFullYear()+'-'+(now.getMonth()+1)+'-'+now.getDate()+':'+now.getHours()+':'+now.getMinutes()).toString();
  var reqOrg = req.body.org;
  var reqGrade = req.body.grade; 
  var tokenId = req.body.id;  
  var reqPrice = req.body.price;
  var orgName = req.file.originalname;
  var fileBuffer = req.file.buffer;
  //var tokenId = uuidv4().substring(0,3);
  var ipfsHash;
  var tokenUri = 'allforus'
  fs.writeFile('./views/common/assets/uploads/' + orgName, fileBuffer, async function (err) {
    if (err) {
      return console.log(err);
    }
    try {
      result = await ipfs.add(fileBuffer);
      ipfsHash=result.path;
      try {
            const estimatedGas = 
                await contract_NFT.methods.mintUniqueTokenTo(addressAlice, tokenId, tokenUri,ipfsHash ,reqGrade,curTime,reqOrg).estimateGas({
                      from: addressAlice,
                      gas: 0
                });
            const txnCount = await web3.eth.getTransactionCount(addressAlice, "pending")
            const receipt = 
                await contract_NFT.methods.mintUniqueTokenTo(addressAlice, tokenId, tokenUri,ipfsHash ,reqGrade,curTime,reqOrg).send({
                    nonce: txnCount,
                    gasPrice: 0,
                    gasLimit: estimatedGas,
                    from: addressAlice,
                    to : contractAddress_NFT
            });
            console.log(`Receipt info:  ${JSON.stringify(receipt.events, null, '\t')}`);
            await tokenNFT.create({tokenId : tokenId , hash : ipfsHash, ownerAddress : addressAlice,grade : reqGrade, date : curTime, org : reqOrg, filename : orgName, price : reqPrice, publishedFlag: 0},function(err){
          if(err)
          console.log(err);
        });        
    } catch (err) {
        console.log(err);
    }
    } catch (err) {
      console.log(err);
    }
    console.log("saved");
  })
  //console.log(req.file);
await  res.redirect('/Seller');
};

exports.buying =async function (req, res) {
 var now = new Date();
var curTime = (now.getFullYear()+'-'+(now.getMonth()+1)+'-'+now.getDate()+':'+now.getHours()+':'+now.getMinutes()).toString();
  console.log(req.body);
  var tokenRCV = req.body;
  var messages;  

  await tokenNFT.findOne({
    tokenId: tokenRCV.tokenId
  }, async function (err, token) {
    var hashFromMain = await contract_NFT.methods.hashByToken(token.tokenId).call();

	messages = ('Main Net' + hashFromMain+'\n'+'Hash'+token.hash).toString();
    console.log(messages);
   for await(const file of ipfs.get(hashFromMain)){
if(!file.content) continue;
const content = [];

for await(const chunk of file.content)
{
content.push(chunk)
}
//console.log(content);
};
// console.log(token.hash);
    if (hashFromMain == token.hash) {
      try {
	var messages = ('Main Net' + hashFromMain+'\n'+'Hash'+token.hash).toString();
        req.flash('errpr',messages);
	//var messages = ('Main Net' + hashFromMain+'\n'+'Hash'+token.hash).toString();
        const estimatedGas = await contract_ERC.methods.transfer(addressAlice, tokenRCV.tokenPrice).estimateGas({
          from: addressFrom,
          gas: 0
        });
        const txnCount = await web3.eth.getTransactionCount(addressBob, "pending")
        const receipt = await contract_ERC.methods.transfer(addressAlice, tokenRCV.tokenPrice).send({
          nonce: txnCount,
          gasPrice: 0,
          gasLimit: estimatedGas,
          from: addressBob,
          to: contractAddress_ERC
        });
        console.log(`Receipt info:  ${JSON.stringify(receipt.events, null, '\t')}`);
      } catch (err) {
        return console.log(err);
      };
        await tokenTrade.create({ tokenId : token.tokenId , tokenNFTHash : token.hash , price:tokenRCV.tokenPrice,date : curTime, buyer : addressBob, seller : addressAlice}, function(err){
if(err)
console.log(err);});
	await tokenNFT.updateOne({ tokenId : token.tokenId}, {publishedFlag:1,buyerAddress : addressBob}, function(err)
       {
	if(err)
	return console.log(err)
	else	
        res.redirect('/Buyer');
   }); }
 })


};

exports.publish = function (req, res) {
  tokenNFT.find({
    publishedFlag: false
  }, async function (err, token) {
    if (err) {
      return res.status(400).send({
        messages: getErrorMessage(err)
      });
    } else {
      try {
        for (i = 0; i < token.length; i++) {
          console.log(token.length);
          const estimatedGas =
            await contract_NFT.methods.mintUniqueTokenTo(addressAlice, token[i].tokenId, "temp", token[i].hash, token[i].grade, token[i].date, token[i].org).estimateGas({
              from: addressFrom,
              gas: 0
            });

          const txnCount = await web3.eth.getTransactionCount(addressAlice, "pending")
          const receipt =
            await contract_NFT.methods.mintUniqueTokenTo(addressAlice, token[i].tokenId, "temp", token[i].hash, token[i].grade, token[i].date, token[i].org).send({
              nonce: txnCount,
              gasPrice: 0,
              gasLimit: estimatedGas,
              from: addressAlice,
              to: contractAddress_NFT
            });

          console.log(`Receipt info:  ${JSON.stringify(receipt.events, null, '\t')}`);


          await tokenNFT.updateOne({
              tokenId: token[i].tokenId
            }, {
              publishedFlag: true
            },
            function (err) {
              if (err)
                console.log(err);
            });
        }

      } catch (err) {
        console.log(err);
      }
      res.redirect('/Seller');
    }
  })
};

exports.change = async function (req, res) {
  var tokenInfo = req.body;
  try {
    const estimatedGas = await contract_NFT.methods.transferFrom(addressAlice, addressBob, tokenInfo.tokenId).estimateGas({
      from: addressAlice,
      gas: 0
    });
    const txnCount = await web3.eth.getTransactionCount(addressAlice, "pending")
    const receipt = await contract_NFT.methods.transferFrom(addressAlice, addressBob, tokenInfo.tokenId).send({
      nonce: txnCount,
      gasPrice: 0,
      gasLimit: estimatedGas,
      from: addressAlice,
      to: contractAddress_NFT
    });
    console.log(`Receipt info:  ${JSON.stringify(receipt.events, null, '\t')}`);
  } catch (err) {
    console.log(err);
  }
  res.redirect('/Seller');
};

exports.Blist = function(req,res){
tokenNFT.find({publishedFlag:0}, async function(err, tokenInfoDB){
if(err)
{
console.log(err);
}
var arrTokenInfo = new Array();
for(var i = 0 ; i<tokenInfoDB.length;i++)
{

 var tokenInfoBlock = new Object();
 tokenInfoBlock = await contract_NFT.methods.informationByToken(tokenInfoDB[i].tokenId).call();
 arrTokenInfo.push(tokenInfoBlock);
}

res.render('./buyer/index',{
InfoFromDB:tokenInfoDB,
InfoFromBlock:arrTokenInfo,
message : null});
});
}

